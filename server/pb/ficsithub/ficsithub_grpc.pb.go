// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.4
// source: ficsithub.proto

package ficsithub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FicsitHubClient is the client API for FicsitHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FicsitHubClient interface {
	GetAllPioneers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PioneersList, error)
}

type ficsitHubClient struct {
	cc grpc.ClientConnInterface
}

func NewFicsitHubClient(cc grpc.ClientConnInterface) FicsitHubClient {
	return &ficsitHubClient{cc}
}

func (c *ficsitHubClient) GetAllPioneers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PioneersList, error) {
	out := new(PioneersList)
	err := c.cc.Invoke(ctx, "/FicsitHub/GetAllPioneers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FicsitHubServer is the server API for FicsitHub service.
// All implementations must embed UnimplementedFicsitHubServer
// for forward compatibility
type FicsitHubServer interface {
	GetAllPioneers(context.Context, *Empty) (*PioneersList, error)
	mustEmbedUnimplementedFicsitHubServer()
}

// UnimplementedFicsitHubServer must be embedded to have forward compatible implementations.
type UnimplementedFicsitHubServer struct {
}

func (UnimplementedFicsitHubServer) GetAllPioneers(context.Context, *Empty) (*PioneersList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPioneers not implemented")
}
func (UnimplementedFicsitHubServer) mustEmbedUnimplementedFicsitHubServer() {}

// UnsafeFicsitHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FicsitHubServer will
// result in compilation errors.
type UnsafeFicsitHubServer interface {
	mustEmbedUnimplementedFicsitHubServer()
}

func RegisterFicsitHubServer(s grpc.ServiceRegistrar, srv FicsitHubServer) {
	s.RegisterService(&FicsitHub_ServiceDesc, srv)
}

func _FicsitHub_GetAllPioneers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FicsitHubServer).GetAllPioneers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FicsitHub/GetAllPioneers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FicsitHubServer).GetAllPioneers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FicsitHub_ServiceDesc is the grpc.ServiceDesc for FicsitHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FicsitHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FicsitHub",
	HandlerType: (*FicsitHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllPioneers",
			Handler:    _FicsitHub_GetAllPioneers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ficsithub.proto",
}
