// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.4
// source: bending.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BendingServiceClient is the client API for BendingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BendingServiceClient interface {
	CalculateBendingType(ctx context.Context, in *BendingRequest, opts ...grpc.CallOption) (*BendingResponse, error)
}

type bendingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBendingServiceClient(cc grpc.ClientConnInterface) BendingServiceClient {
	return &bendingServiceClient{cc}
}

func (c *bendingServiceClient) CalculateBendingType(ctx context.Context, in *BendingRequest, opts ...grpc.CallOption) (*BendingResponse, error) {
	out := new(BendingResponse)
	err := c.cc.Invoke(ctx, "/BendingService/CalculateBendingType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BendingServiceServer is the server API for BendingService service.
// All implementations must embed UnimplementedBendingServiceServer
// for forward compatibility
type BendingServiceServer interface {
	CalculateBendingType(context.Context, *BendingRequest) (*BendingResponse, error)
	mustEmbedUnimplementedBendingServiceServer()
}

// UnimplementedBendingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBendingServiceServer struct {
}

func (UnimplementedBendingServiceServer) CalculateBendingType(context.Context, *BendingRequest) (*BendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateBendingType not implemented")
}
func (UnimplementedBendingServiceServer) mustEmbedUnimplementedBendingServiceServer() {}

// UnsafeBendingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BendingServiceServer will
// result in compilation errors.
type UnsafeBendingServiceServer interface {
	mustEmbedUnimplementedBendingServiceServer()
}

func RegisterBendingServiceServer(s grpc.ServiceRegistrar, srv BendingServiceServer) {
	s.RegisterService(&BendingService_ServiceDesc, srv)
}

func _BendingService_CalculateBendingType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BendingServiceServer).CalculateBendingType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BendingService/CalculateBendingType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BendingServiceServer).CalculateBendingType(ctx, req.(*BendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BendingService_ServiceDesc is the grpc.ServiceDesc for BendingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BendingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BendingService",
	HandlerType: (*BendingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateBendingType",
			Handler:    _BendingService_CalculateBendingType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bending.proto",
}
